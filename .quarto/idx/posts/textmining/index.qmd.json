{"title":"Text Mining Learning Guide","markdown":{"yaml":{"title":"Text Mining Learning Guide","description":"A learning guide of text mining with the dataset in RStudio","author":"Yiyang Shi, Cecelia Kaufmann, Tam Nguyen","date":"2023-03-01","categories":["R","Text Mining","Sentiment Analysis"],"image":"textmining.png"},"headingText":"Background and Resources -- Cecelia","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, error = TRUE)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dbplyr)\nlibrary(gutenbergr)\nlibrary(tidytext)\nlibrary(stringr)\nlibrary(janeaustenr)\ndata(\"stop_words\")\nlibrary(scales)\nlibrary(textdata)\nlibrary(wordcloud)\nlibrary(igraph) #to create an igraph object\nlibrary(ggraph) #to visualize the igraph object by turning it into ggraph with appropriate functions\n```\n\n\n+ tidy text analysis (why do we want to do this?)\n+ the package (gutenbergr and what is it)\n+ different lexicons\n+ sentiment analysis \n+ reminder about joins\n\n## Resources\n[Textbook on tidy text]<https://www.tidytextmining.com/index.html>\n\n[Sentiment Analysis and Tidy Tuesday]<https://juliasilge.com/blog/animal-crossing/>\n\n## The tidy text format & Document-Term Matrix(DTM)\n\n* According to the \"Text Mining with R\" textbook, the tidy text format is a table with one-token-per-row. This means that:\n  + Each variable is a column\n  + Each observation is a row\n  + Each type of observation unit is a table\nTherefore, a token is a meaningful unit of text, like a word, that we as data scientists are interested in analyzing. \nFor tidy text mining, we may want to do a process called tokenization which splits words into tokens and then allows us to normally analyze by word. \n\n* In chapter 5 of \"Text Mining with R\", DTM is one of the most common structure that text mining work with, where\n  + Each row represents a document (book or article)\n  + Each column represents one term.\n  + Each value (typically) contains the number of appearances of that term in that document.\n\n\nSince DTM objects and and tidy data frames are two incompactible objects, we cannot use tidy tools to analyze a DTM object. Tidytext package provides two functions that convert between these two formats:\n\n+ tidy() turns a DTM to a tidy dataframe.\n+ cast() turns a tidy one term per row dataframe to a matrix.\n\n```{r}\n# DTM\n# Install the package AssociatedPress before you run this code chunk\ndata(\"AssociatedPress\", package = \"topicmodels\")\n\n# tidying a DTM\nap_td <- tidy(AssociatedPress)\nap_td\n\n# joining tidy dataframe with sentiments dataframe\nap_sentiments <- ap_td %>% \n  inner_join(get_sentiments(\"bing\"), by = c(term = \"word\"))\n\n# Here is an example from the \"Text Mining with R\"\nap_sentiments %>% \n  count(sentiment, term, wt = count) %>% \n  ungroup() %>% \n  filter(n > 200) %>% \n  mutate(m = ifelse(sentiment == \"positive\", n, -n)) %>% \n  mutate(term = reorder(term, m)) %>% \n  ggplot(aes(x = m, y = term, fill = sentiment)) +\n  geom_col() +\n  labs(x = \"Contribution to Sentiment\", y = \"\")\n```\n\n```{r}\n# casting a tidy dataframe\nap_td %>% \n  cast_dtm(document, term, count)\n```\n\n\n## Accessing the Jane Austin Books\n```{r}\noriginal_books <- austen_books() %>%\n  group_by(book) %>%\n  mutate(linenumber = row_number(),\n         chapter = cumsum(str_detect(text, \n                                     regex(\"^chapter [\\\\divxlc]\",\n                                           ignore_case = TRUE)))) %>%\n  ungroup()\n\noriginal_books\n```\n\nNow, to work with the tidy dataset we just created, we need to restructure it into a one-token-per-row format which leads us to our unnest_tokens function\n\n```{r}\ntidy_books <- original_books %>%\n  unnest_tokens(word, text)\n```\n\nThe unnest_tokens uses the tokenizers package to separate each line of text in the original data frame into tokens. (More on different tyoes of tokenizing later)\n\n\nNow that our data is in a one-word-per-row format, we can use tidy tools (like dplyr). \n\n## Removing Words\nWe can use the tidytext dataset stop_words with an anti_join to remove common English words like \"the\", \"of\", and \"to\" which potentially not be fruitful in a sentiment analysis context. \n\n```{r}\ntidy_books <- tidy_books %>%\n  anti_join(stop_words)\n```\n\n## Practice\n1. Find the most common words in all the tidy_books books as a whole. Create a visualization via ggplot to show the most common words in Jane Austen books. \n```{r}\ntidy_books\n\n```\n\n\n# The gutenbergr package\n\nAnother package we will be using for our sentiment analysis is the gutenbergr package, which can give us access to public domain works in the Project Gutenberg <https://www.gutenberg.org/> Collection. This is a huge package that gives us access to a large number of books and metadata around the books.\n\n\nLet's look at some of the Bronte sisters' works. \n\n## Practice\n2. To do: Pepare the gutenberg dataset for the Bronte sisters for sentiment analysis (hint: think unnest_tokens and anti_join). From there, how would we find the the most common words in the novels?\n\n```{r}\nbronte <- gutenberg_download(c(1260, 768, 969, 9182, 767))\n\n## What would we insert in the in the parentheses?\nbronte %>%\n  unnest_tokens(???, ???) %>%\n  anti_join(????)\n\n## Now, use previous examples to find the most common words\n\n```\n\n## Section Practice\n\nSo, how do we think we can calculate the frequency of each word for the works of Jane Austin and the Bronte sisters? How would we graph this? \n\n```{r}\nfrequency <- bind_rows(mutate (bronte, author = \n\"Bronte Sister\"),\nmutate(tidy_books, author = \"Jane Austen\"))\n ## Can you find a way to use a regx here?\n \n```\n\n\nHow would we plot this (hint: use ggplot)?\n```{r}\n\n```\n\n\nWe can also run correlation tests, which allows us to quantify how similar and different these sets of word frequencies are.\n\nLet's run a Pearson's correlation test between the Bronte sisters and Jane Austins' works. \n\n```{r eval=FALSE}\ncor.test(data = frequency[frequency$author == \"BrontÃ« Sisters\",],\n         ~ proportion + `Jane Austen`)\n```\n\n## Practice\n\nWhat does this information tell you?\n\n>>>> ANSWER:\n\n\nSentiment Analysis with tidy data\n\nSo what is sentiment analysis? Sentiment Analysis allows us to analyze the emotion in text programmatically. one of the more common ways to do this is to consider the text as a combination of its individual words and the sentiment content of the whole text as the sum of the sentiment content of the individual words. \n\nHow are sentiment lexicons created and validated? They are constructed either via crowdsourcing or by an individual which they was validated using crowdsourcing, restaurant or movie reviews, or Twitter data. \n\nThere are a few different lexicon databases that can be used to do sentiment analysis (read more here <>) but for this we will use the nrc lexicon. \n\n```{r}\nget_sentiments(\"nrc\")\n```\n***NOTE: THIS WILL TAKE A WHILE TO DOWNLOAD***\n\nThe nrc lexicon works by giving a list of English words and then giving their association to eight basic emotions (anger, fear, anticipation, trust, surprise, sadness, joy, and disgust) and two sentiments (negative and positive). The annotations for the lexicon is collected manually through crowd sourcing. \n\nTo explore more about the nrc lexicon: <https://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm#:~:text=The%20NRC%20Emotion%20Lexicon%20is,were%20manually%20done%20by%20crowdsourcing.>\n\n\nAs shown below, once we add new variables and organize the book so each word has a distinct row, we want to use an inner_join to find the words in common in the book Emma with the \"joy\" words (or nrc_join dataset) in the nrc lexicon. \n\nLet's try an example: What are the most common joy words in the book Emma?\n\n```{r}\ntidy_books <- austen_books() %>%\n  group_by(book) %>%\n  mutate(\n    linenumber = row_number(),\n    chapter = cumsum(str_detect(text, \n                                regex(\"^chapter [\\\\divxlc]\", \n                                      ignore_case = TRUE)))) %>%\n  ungroup() %>%\n  unnest_tokens(word, text)\n\nnrc_joy <- get_sentiments(\"nrc\") %>% \n  filter(sentiment == \"joy\")\n\ntidy_books %>%\n  filter(book == \"Emma\") %>%\n  inner_join(nrc_joy) %>%\n  count(word, sort = TRUE)\n\n```\n\n\n# Practice: How many positive and negative words are in each of the sections of the book? Here is some starter code to help you out!\n\n```{r eval=FALSE}\njane_austen_posneg <- tidy_books %>%\n  inner_join(get_sentiments(\"nrc\")) %>%\n  count(book, ______, %/% 80,\n       # We are using 80 just because of the text \n        sentiment) %>%\n  # pivot_wider into sentiment and get values from the count (n)\n%>% \n  mutate(sentiment = positive - negative)\n```\n\nNow try and plot the results! Creat the graph however you think best fits the previous results.\n\n```{r}\n\n```\n\n\nPractice: What are the most common positive and negative words? Use the nrc database and tidy_books. We will want to use an inner_join and a count(). \n\n\n\n```{r}\n\n```\n\n\nNow, make a graph with this information\n\n```{r}\n\n```\n\n\nOne cool thing with sentiment analysis is we customize our lists, like for example the word \"miss\" is coded as negative but can also be used as a title for a young, unmarried women in Jane Austin's works. We can use bind_rows() to solve this:\n\n```{r}\nfigure_custom_words <- bind_rows(tibble(word = c(\"miss\"), lexicon = c(\"custom\")),\n                                 stop_words)\n```\n\n\n\n\n#### Introduction to the tf-idf statistic - Tam\n\nQuestion: When we look at a body of literature works, say J.K.Rowling's Harry Potter series, and want to know what words/terms are more prominent in one book than in others (therefore can potentially tell us about a character or event specifically tied to that book), how do we do it?\n\n`tf` : term frequency, the number of appearances a word makes over total words in a document (%).\n\nproblem: the most frequently used words in English tend to be `stopwords` like \"the\", \"of\" or \"like\", which generally are not that important except in some cases. Therefore, we need a better metric to reflect the true value of a word or phrase.\n\n\n`idf`: inverse document frequency, which is the natural log of the total number of documents divided by the number of documents containing the term we want to examine. The `idf` is a measure that penalizes commonly used words by decreasing their weights but rewarding less commonly used words by increasing their weights. Its formula is as follows \n\n                \n$$idf(\\textrm{term}) = \\ln \\left( \\frac{n_{\\textrm{documents}}}{n_{\\textrm{documents containing term}}}\\right)$$"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.189","editor":"visual","theme":"morph","title":"Text Mining Learning Guide","description":"A learning guide of text mining with the dataset in RStudio","author":"Yiyang Shi, Cecelia Kaufmann, Tam Nguyen","date":"2023-03-01","categories":["R","Text Mining","Sentiment Analysis"],"image":"textmining.png"},"extensions":{"book":{"multiFile":true}}}}}